// Generated by CoffeeScript 1.6.3
/*
  蛇围绕画布边缘移动（围观），蛇的身体在td间移动。怎么移动的呢？点亮td中的div。
                    /^\/^\
                  _|__|  O|
         \/     /~     \_/ \
          \____|__________/  \
                 \_______      \
                         `\     \                 \
                           |     |                  \
                          /      /                    \
                         /     /                       \\
                       /      /                         \ \
                      /     /                            \  \
                    /     /             _----_            \   \
                   /     /           _-~      ~-_         |   |
                  (      (        _-~    _--_    ~-_     _/   |
                   \      ~-____-~    _-~    ~-_    ~-_-~    /
                     ~-_           _-~          ~-_       _-~
                        ~--______-~                ~-___-~
*/


(function() {
  var BOTTOM, Item, LEFT, RIGHT, Snake, SnakeView, TOP, snakeLen, speed, speedLevel, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  snakeLen = 18;

  speed = 100;

  speedLevel = "slow";

  LEFT = 0;

  BOTTOM = 1;

  RIGHT = 2;

  TOP = 3;

  Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      _ref = Item.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Item;

  })(Backbone.Model);

  Snake = (function(_super) {
    __extends(Snake, _super);

    function Snake() {
      _ref1 = Snake.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Snake.prototype.model = Item;

    return Snake;

  })(Backbone.Collection);

  $.extend({
    move: function(index, item) {
      var newItemNum;
      if ($(item).hasClass("item0")) {
        return $(item).hide(speedLevel, function() {
          return $(this).removeClass().removeData("item");
        });
      } else {
        newItemNum = $(item).data("item") - 1;
        return $(item).removeClass().addClass("snake item" + newItemNum).data("item", newItemNum);
      }
    },
    reverseDom: function(oldDomList) {
      var arr, len, newDomList;
      arr = oldDomList.toArray();
      len = arr.length;
      newDomList = [];
      while (len--) {
        newDomList.push(arr[len]);
      }
      return $(newDomList);
    }
  });

  $.fn.extend({
    createSnake: function(len) {
      var count, itemNum, _results;
      count = 1;
      _results = [];
      while (len--) {
        itemNum = snakeLen - count++;
        _results.push($(this).eq(len).find("div").addClass("item" + itemNum + " snake").data("item", itemNum).show());
      }
      return _results;
    },
    moveSnake: function() {
      return $(this).find("div.snake").each(function(i, item) {
        return $.move(i, item);
      });
    },
    findSnakeHead: function() {
      return $(this).find("div.item" + (snakeLen - 1)).closest("td");
    },
    createSnakeHead: function() {
      return $(this).find("div").addClass("snake item" + snakeLen).data("item", snakeLen).show();
    },
    filterSnakeBody: function() {
      return $(this).filter(":lt(" + ($(this).size() - 1) + ")");
    },
    findSnakeItemCount: function() {
      return $(this).find("div.snake").size();
    }
  });

  SnakeView = (function(_super) {
    __extends(SnakeView, _super);

    function SnakeView() {
      _ref2 = SnakeView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SnakeView.prototype.tagName = "div";

    SnakeView.prototype.className = "snake";

    SnakeView.prototype.initialize = function() {
      var len;
      _.bindAll(this, "render", "moveLeft", "moveBottom");
      this.direction = LEFT;
      this.$tblMap = $("table.base-map>tbody");
      this.$leftRoad = this.$tblMap.find("tr:first>td");
      this.$bottomRoad = this.$tblMap.find("tr").find("td:last");
      this.$rightRoad = $.reverseDom(this.$tblMap.find("tr:last>td"));
      this.$topRoad = $.reverseDom(this.$tblMap.find("tr").find("td:first"));
      len = snakeLen;
      this.collection = new Snake();
      while (len--) {
        this.collection.add(new Item());
      }
      return this.render();
    };

    SnakeView.prototype.render = function() {
      return this.$leftRoad.createSnake(snakeLen);
    };

    SnakeView.prototype.moveCtrl = function() {
      if (this.direction === LEFT) {
        return this.moveLeft();
      } else if (this.direction === BOTTOM) {
        return this.moveBottom();
      } else if (this.direction === RIGHT) {
        return this.moveRight();
      } else if (this.direction === TOP) {
        return this.moveTop();
      }
    };

    SnakeView.prototype.moveLeft = function() {
      var $newHeadTd, $oldHeadTd;
      if (this.$topRoad.findSnakeItemCount()) {
        this.$topRoad.filterSnakeBody().moveSnake();
      }
      $oldHeadTd = this.$leftRoad.findSnakeHead();
      $newHeadTd = $oldHeadTd.next();
      $newHeadTd.createSnakeHead();
      this.$leftRoad.moveSnake();
      if (!$newHeadTd.size()) {
        this.direction = BOTTOM;
        return this.$bottomRoad.createSnake(2);
      }
    };

    SnakeView.prototype.moveBottom = function() {
      var $newHeadTd, $oldHeadTd;
      if (this.$leftRoad.findSnakeItemCount()) {
        this.$leftRoad.filterSnakeBody().moveSnake();
      }
      $oldHeadTd = this.$bottomRoad.findSnakeHead();
      $newHeadTd = $oldHeadTd.closest("tr").next().find("td:last");
      $newHeadTd.createSnakeHead();
      this.$bottomRoad.moveSnake();
      if (!$newHeadTd.size()) {
        this.direction = RIGHT;
        return this.$rightRoad.createSnake(2);
      }
    };

    SnakeView.prototype.moveRight = function() {
      var $newHeadTd, $oldHeadTd;
      if (this.$bottomRoad.findSnakeItemCount()) {
        this.$bottomRoad.filterSnakeBody().moveSnake();
      }
      $oldHeadTd = this.$rightRoad.findSnakeHead();
      $newHeadTd = $oldHeadTd.prev();
      $newHeadTd.createSnakeHead();
      this.$rightRoad.moveSnake();
      if (!$newHeadTd.size()) {
        this.direction = TOP;
        return this.$topRoad.createSnake(2);
      }
    };

    SnakeView.prototype.moveTop = function() {
      var $newHeadTd, $oldHeadTd;
      if (this.$rightRoad.findSnakeItemCount()) {
        this.$rightRoad.filterSnakeBody().moveSnake();
      }
      $oldHeadTd = this.$topRoad.findSnakeHead();
      $newHeadTd = $oldHeadTd.closest("tr").prev().find("td:first");
      $newHeadTd.createSnakeHead();
      this.$topRoad.moveSnake();
      if (!$newHeadTd.size()) {
        this.direction = LEFT;
        return this.$leftRoad.createSnake(2);
      }
    };

    return SnakeView;

  })(Backbone.View);

  $(document).ready(function() {
    var view;
    view = new SnakeView();
    return window.setInterval(function() {
      return view.moveCtrl();
    }, speed);
  });

}).call(this);

/*
//@ sourceMappingURL=snake.map
*/
