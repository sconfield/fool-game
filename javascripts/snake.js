// Generated by CoffeeScript 1.6.3
/*
  蛇围绕画布边缘移动（围观），蛇的身体在td间移动。怎么移动的呢？点亮td中的div。
                    /^\/^\
                  _|__|  O|
         \/     /~     \_/ \
          \____|__________/  \
                 \_______      \
                         `\     \                 \
                           |     |                  \
                          /      /                    \
                         /     /                       \\
                       /      /                         \ \
                      /     /                            \  \
                    /     /             _----_            \   \
                   /     /           _-~      ~-_         |   |
                  (      (        _-~    _--_    ~-_     _/   |
                   \      ~-____-~    _-~    ~-_    ~-_-~    /
                     ~-_           _-~          ~-_       _-~
                        ~--______-~                ~-___-~
*/


(function() {
  var Item, Snake, SnakeView, map, snakeLen, speed, speedLevel, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  snakeLen = 18;

  speed = 300;

  speedLevel = "slow";

  map = "table.base-map>tbody";

  $.extend({
    reverseDom: function(oldDomList) {
      var arr, len, newDomList;
      arr = oldDomList.toArray();
      len = arr.length;
      newDomList = [];
      while (len--) {
        newDomList.push(arr[len]);
      }
      return $(newDomList);
    }
  });

  $.fn.extend({
    getRealRoad: function() {
      return $(this).filter(":gt(0)");
    }
  });

  Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      _ref = Item.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Item;

  })(Backbone.Model);

  Snake = (function(_super) {
    __extends(Snake, _super);

    function Snake() {
      _ref1 = Snake.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Snake.prototype.model = Item;

    return Snake;

  })(Backbone.Collection);

  SnakeView = (function(_super) {
    __extends(SnakeView, _super);

    function SnakeView() {
      _ref2 = SnakeView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SnakeView.prototype.tagName = "div";

    SnakeView.prototype.className = "snake";

    SnakeView.prototype.initialize = function() {
      var $bottomRoad, $leftRoad, $rightRoad, $tblMap, $topRoad, len;
      _.bindAll(this, "render", "move", "letsgo");
      $tblMap = $(map);
      $leftRoad = $tblMap.find("tr:first>td").getRealRoad();
      $bottomRoad = $tblMap.find("tr").find("td:last").getRealRoad();
      $rightRoad = $.reverseDom($tblMap.find("tr:last>td")).getRealRoad();
      $topRoad = $.reverseDom($tblMap.find("tr").find("td:first")).getRealRoad();
      this.$road = $.merge($.merge($.merge($leftRoad, $bottomRoad), $rightRoad), $topRoad).addClass("snake-road");
      len = snakeLen;
      this.collection = new Snake();
      while (len--) {
        this.collection.add(new Item());
      }
      return this.render();
    };

    SnakeView.prototype.render = function() {
      var len, _results;
      len = this.collection.length;
      _results = [];
      while (len--) {
        _results.push(this.$road.eq(len).find("div").addClass("item" + len + " snake").data("item", len).css("visibility", "visible"));
      }
      return _results;
    };

    SnakeView.prototype.letsgo = function() {
      var move;
      move = this.move;
      return setInterval(function() {
        return move();
      }, speed);
    };

    SnakeView.prototype.move = function() {
      var $newHead, $oldHead, oldIndex;
      $oldHead = this.$road.find("div.item" + (this.collection.length - 1)).parent();
      oldIndex = this.$road.index($oldHead);
      $newHead = this.$road.eq(oldIndex + 1);
      $newHead.find("div").addClass("snake item" + this.collection.length).data("item", this.collection.length).css("visibility", "visible");
      return this.$road.find("div.snake").each(function() {
        var newItemNum;
        if ($(this).hasClass("item0")) {
          return $(this).hide(speedLevel, function() {
            return $(this).css({
              "visibility": "hide",
              "display": "block"
            }).removeClass().removeData("item");
          });
        } else {
          newItemNum = $(this).data("item") - 1;
          return $(this).removeClass().addClass("snake item" + newItemNum).data("item", newItemNum);
        }
      });
    };

    return SnakeView;

  })(Backbone.View);

  $(document).ready(function() {
    var view;
    view = new SnakeView();
    return view.letsgo();
  });

}).call(this);

/*
//@ sourceMappingURL=snake.map
*/
